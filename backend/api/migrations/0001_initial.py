# Generated by Django 5.1.6 on 2025-03-02 15:58

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.UUID('22ddeb17-f859-4895-b4b7-69cd906a3fe4'), max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250)),
                ('category', models.CharField(max_length=250)),
                ('subcategory', models.CharField(max_length=250)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseMaterial',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.UUID('545345d9-624d-4c8f-ab58-bf171997ce3c'), max_length=100, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=250)),
                ('content', models.TextField()),
                ('uploadURL', models.CharField(max_length=250, null=True)),
                ('duration', models.PositiveSmallIntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course', to='api.course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseTracker',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.UUID('b5699baf-f9b4-499f-a7b8-059bb3eea667'), max_length=100, primary_key=True, serialize=False)),
                ('is_blocked', models.BooleanField(default=False)),
                ('profile', models.CharField(choices=[('author', 'Author'), ('learner', 'Learner')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='courseTracker',
            field=models.ManyToManyField(related_name='courseTracker', through='api.CourseTracker', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.UUID('eaaa3930-6c09-4cf8-843a-3504bead0af2'), max_length=100, primary_key=True, serialize=False)),
                ('interest', models.CharField(max_length=99, validators=[django.core.validators.MinLengthValidator(0, 'interest field cannot be empty'), django.core.validators.RegexValidator(message='interest must be valid and in small letters', regex='^[a-z][a-z_]*[a-z]$')])),
                ('studentInterest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='studentInterest', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.UUID('7a088058-8526-4945-9bb4-8ea628304ac6'), max_length=100, primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=250)),
                ('isRead', models.BooleanField(default=False)),
                ('userNotification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userNotification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('student', 'Student')], max_length=7)),
                ('userRole', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='userRole', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.UUID('3d4f9022-1130-496d-8271-a73c22a2888c'), max_length=100, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('busy', 'Busy'), ('dnd', 'Do Not Disturb'), ('away', 'Away')], default='active', max_length=6)),
                ('userStatus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userStatus', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentFeedback',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.UUID('da875cb2-23f4-4722-b6c0-cc339eb78fcf'), max_length=100, primary_key=True, serialize=False)),
                ('feedback', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='studentFeedback',
            field=models.ManyToManyField(related_name='studentFeedback', through='api.StudentFeedback', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='coursetracker',
            constraint=models.CheckConstraint(condition=models.Q(('profile', 'author'), ('profile', 'learner'), _connector='OR'), name='Profile constraint', violation_error_message='Profile value must be in (author, learner).'),
        ),
        migrations.AddConstraint(
            model_name='role',
            constraint=models.CheckConstraint(condition=models.Q(('role', 'teacher'), ('role', 'student'), _connector='OR'), name='Role constraint', violation_error_message='Role value must be in (teacher, student).'),
        ),
        migrations.AddConstraint(
            model_name='status',
            constraint=models.CheckConstraint(condition=models.Q(('status', 'active'), ('status', 'busy'), ('status', 'dnd'), ('status', 'away'), _connector='OR'), name='Status constraint', violation_error_message="User's status value must be in (active, busy, dnd, away)."),
        ),
    ]
